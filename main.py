import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN
from generate import ask_ai
from learn import (
    get_grammar_prompt,
    get_word_definition_prompt,
    get_translation_prompt,
    get_conversation_prompt,
)
from utils import clean_text

logging.basicConfig(level=logging.INFO)

from learn import generate_daily_words_via_ai

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è aiogram 3.x
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_mode = {}


def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/translate"), KeyboardButton(text="/define")],
            [KeyboardButton(text="/grammar"), KeyboardButton(text="/chat")],
            [KeyboardButton(text="/words")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º"
    )
    return keyboard



@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/translate ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç\n"
        "/define ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞\n"
        "/grammar ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏\n"
        "/chat ‚Äî –¥–∏–∞–ª–æ–≥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "/words - 5 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤",
        reply_markup=create_main_keyboard()
    )

@dp.message(Command("translate"), lambda message: message.text.startswith("/translate"))
async def cmd_translate(message: types.Message):
    user_mode[message.from_user.id] = "translate"
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

@dp.message(Command("define"), lambda message: message.text.startswith("/define"))
async def cmd_define(message: types.Message):
    user_mode[message.from_user.id] = "define"
    await message.answer("üîç –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.")

@dp.message(Command("grammar"), lambda message: message.text.startswith("/grammar"))
async def cmd_grammar(message: types.Message):
    user_mode[message.from_user.id] = "grammar"
    await message.answer("üìö –í–≤–µ–¥–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–º—É.")

@dp.message(Command("chat"), lambda message: message.text.startswith("/chat"))
async def cmd_chat(message: types.Message):
    user_mode[message.from_user.id] = "chat"
    await message.answer("üí¨ –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –ø–æ–±–æ–ª—Ç–∞–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!")

@dp.message(Command("words"), lambda message: message.text.startswith("/words"))
async def send_daily_words(message: types.Message):
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–æ–≤–∞ –¥–Ω—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    result = generate_daily_words_via_ai()
    await message.answer(result)


@dp.message()
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    mode = user_mode.get(user_id)

    if not mode:
        return  

    text = clean_text(message.text)

    try:
        if mode == "translate":
            prompt = get_translation_prompt(text)
            system = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ –º–µ–∂–¥—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏ —Ä—É—Å—Å–∫–∏–º. –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥."
        elif mode == "define":
            prompt = get_word_definition_prompt(text)
            system = "–¢—ã —Å–ª–æ–≤–∞—Ä—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –û–±—ä—è—Å–Ω–∏ —Å–ª–æ–≤–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º."
        elif mode == "grammar":
            prompt = get_grammar_prompt(text)
            system = "–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –û–±—ä—è—Å–Ω–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –ø–æ–Ω—è—Ç–Ω–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."
        elif mode == "chat":
            prompt = text
            system = get_conversation_prompt()

        response = await ask_ai(prompt, system)
        await message.answer(response)

    except Exception:
        logging.exception("AI error")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(dp.start_polling(bot))


